
&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогПути = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогПути.Каталог = "";
	ДиалогПути.МножественныйВыбор = Ложь;
	ДиалогПути.Заголовок = "Выберите файл";
	
	Оповещение = Новый ОписаниеОповещения("ВыборПутиКФайлуЗавершение", ЭтотОбъект);
	ДиалогПути.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПутиКФайлуЗавершение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	ПутьКФайлу = Результат[0];
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзФайла(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "не выбран файл.";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;

	Если не ЗначениеЗаполнено(Разделитель) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен разделитель.";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат
	КонецЕсли;
	
	
	// Формат файла следующий:
	// [ТипСайта];[Наименование курса];[Гуид]; [Предприятие]
	//
	// Пример
	// dist; по программе "1С:Управление торговлей 8";CB2EA963-9FC6-4E49-A736-4EDCC2C04575; Upravlen                      //Upravlen - кодовое слово

	
	ТаблицаСДаннымиИзФайла.Очистить();
	
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.Прочитать(ПутьКФайлу);
	
	КоличествоСтрок = ТекстовыйФайл.КоличествоСтрок();
	
	ТекущийКурс = "";
	ТекущееПредприятие = "";
	
	ДваСимвола = Ложь;
	УменьшитьНаименованиеПредприятияВЗапросе = Ложь;
	НомерРазделаСКоторогоУменьшатьНаименованиеПредприятия = 10;

	Для СтрокаФайла = 1 По КоличествоСтрок Цикл
		
		ТекСтрока = ТекстовыйФайл.ПолучитьСтроку(СтрокаФайла);
		
		Если Не ЗначениеЗаполнено(ТекСтрока) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСтрок = СтрРазделить(ТекСтрока, Разделитель);
		КоличествоЗначенийВСтроке = МассивСтрок.Количество() ;
		
		ТипСайта = СокрЛП(МассивСтрок[0]);
		ЗначениеНаименования = СокрЛП(МассивСтрок[1]);
		ЗначениеКодаГуида = СокрЛП(МассивСтрок[2]);
		ЗначениеПредприятие = СокрЛП(МассивСтрок[3]);
		
		СтрокаТЧ = ТаблицаСДаннымиИзФайла.Добавить();
		СтрокаТЧ.КурсНаименование   = ЗначениеНаименования;
		СтрокаТЧ.КурсГуид           = ЗначениеКодаГуида; 
		СтрокаТЧ.ДваСимвола = ?(ТипСайта = "dist", Истина, Ложь);
		СтрокаТЧ.ТипСайта = ТипСайта;
		СтрокаТЧ.КурсПредприятие = ЗначениеПредприятие;
		
	КонецЦикла;
	
	ЗаполнитьДеревоКонфигурации();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоКонфигурации()

	ДанныеДляЗагрузкиВРегистр.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТС_Курсы.КурсНаименование КАК КурсНаименование,
		|	ТС_Курсы.КурсГуид КАК КурсГуид,
		|	ТС_Курсы.ДваСимвола КАК ДваСимвола,
		|	ТС_Курсы.ТипСайта КАК ТипСайта,
		|	ТС_Курсы.КурсПредприятие КАК КурсПредприятие
		|ПОМЕСТИТЬ ВТ_ДанныеИзФайла
		|ИЗ
		|	&ТЧ_ДанныеИзФайла КАК ТС_Курсы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТС_Курсы.Ссылка КАК КурсСсылка,
		|	ВТ_ДанныеИзФайла.КурсНаименование КАК КурсНаименование
		|ПОМЕСТИТЬ ВТ_КурсСсылка
		|ИЗ
		|	ВТ_ДанныеИзФайла КАК ВТ_ДанныеИзФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТС_Курсы КАК ТС_Курсы
		|		ПО (ТС_Курсы.Наименование = ВТ_ДанныеИзФайла.КурсНаименование)
		|ГДЕ
		|	ТС_Курсы.ЭтоГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеИзФайла.КурсНаименование КАК КурсНаименование,
		|	NULL КАК DL_RES_Free,
		|	NULL КАК FreeДваСимвола,
		|	NULL КАК Free,
		|	ВТ_ДанныеИзФайла.КурсГуид КАК DL_RES_Dist,
		|	ВТ_ДанныеИзФайла.ДваСимвола КАК DistДваСимвола,
		|	ВТ_ДанныеИзФайла.КурсПредприятие КАК Dist
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	ВТ_ДанныеИзФайла КАК ВТ_ДанныеИзФайла
		|ГДЕ
		|	ВТ_ДанныеИзФайла.ТипСайта = ""dist""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеИзФайла.КурсНаименование,
		|	ВТ_ДанныеИзФайла.КурсГуид,
		|	ВТ_ДанныеИзФайла.ДваСимвола,
		|	ВТ_ДанныеИзФайла.КурсПредприятие,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_ДанныеИзФайла КАК ВТ_ДанныеИзФайла
		|ГДЕ
		|	ВТ_ДанныеИзФайла.ТипСайта = ""free""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КурсСсылка.КурсСсылка КАК Курс,
		|	ВТ_Данные.КурсНаименование КАК КурсНаименование,
		|	МАКСИМУМ(ВТ_Данные.DL_RES_Dist) КАК DL_RES_Dist,
		|	МАКСИМУМ(ВТ_Данные.DistДваСимвола) КАК DistДваСимвола,
		|	МАКСИМУМ(ВТ_Данные.Dist) КАК Dist,
		|	МАКСИМУМ(ВТ_Данные.DL_RES_Free) КАК DL_RES_Free,
		|	МАКСИМУМ(ВТ_Данные.FreeДваСимвола) КАК FreeДваСимвола,
		|	МАКСИМУМ(ВТ_Данные.Free) КАК Free,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПараметрыФормированияЗапросаДляОбновленияТестов.Курс, ЗНАЧЕНИЕ(Справочник.ТС_Курсы.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ТС_Курсы.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ДанныеЕстьВБазе
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсСсылка КАК ВТ_КурсСсылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыФормированияЗапросаДляОбновленияТестов КАК ПараметрыФормированияЗапросаДляОбновленияТестов
		|			ПО ВТ_КурсСсылка.КурсСсылка = ПараметрыФормированияЗапросаДляОбновленияТестов.Курс
		|		ПО ВТ_Данные.КурсНаименование = ВТ_КурсСсылка.КурсНаименование
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Данные.КурсНаименование,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПараметрыФормированияЗапросаДляОбновленияТестов.Курс, ЗНАЧЕНИЕ(Справочник.ТС_Курсы.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ТС_Курсы.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	ВТ_КурсСсылка.КурсСсылка";
	Запрос.УстановитьПараметр("ТЧ_ДанныеИзФайла", ТаблицаСДаннымиИзФайла.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаКурс = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаКурс.Следующий() Цикл
		
		СтрТаблицы = ДанныеДляЗагрузкиВРегистр.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТаблицы, ВыборкаКурс);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, является ли строка уникальным идентификатором.
// В качестве уникального идентификатора предполагается строка вида
// "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX", где X = [0..9,a..f].
//
// Параметры:
//  Значение - Строка - проверяемая строка.
//
// Возвращаемое значение:
//  Булево - Истина, если переданная строка является уникальным идентификатором.
//
Функция ЭтоУникальныйИдентификатор(Знач Значение)
	
	Шаблон = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX";
	
	Если СтрДлина(Шаблон) <> СтрДлина(Значение) Тогда
		Возврат Ложь;
	КонецЕсли;
	Для Позиция = 1 По СтрДлина(Значение) Цикл
		Если КодСимвола(Шаблон, Позиция) = 88 // X
			И ((КодСимвола(Значение, Позиция) < 48 Или КодСимвола(Значение, Позиция) > 57) // 0..9
			И (КодСимвола(Значение, Позиция) < 97 Или КодСимвола(Значение, Позиция) > 102) // a..f
			И (КодСимвола(Значение, Позиция) < 65 Или КодСимвола(Значение, Позиция) > 70)) // A..F
			Или КодСимвола(Шаблон, Позиция) = 45 И КодСимвола(Значение, Позиция) <> 45 Тогда // -
				Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции


&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьДанныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеНаСервере()
	
	Сообщение = Новый СообщениеПользователю;
		
	Попытка
		ПодготовитьДанныеКЗаписи();
		ЗаписатьДанныеВРегистр();
	
		Сообщение.Текст = "Всё ок";
		Сообщение.Сообщить();
	Исключение
		ОтменитьТранзакцию();
		Сообщение.Текст = "Возникла ошибка. Подробности в журнале";
		Сообщение.Сообщить();
		ЗаписьЖурналаРегистрации("Ошибка создания данных", УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГУИДРаздела(РазделГуидВБазе, Знач РазделСсылка)
	
	Если ТипСайта = "dist" Тогда
		РазделГуидВБазе = РазделСсылка.DL_RES_Dist;
	Иначе
		РазделГуидВБазе = РазделСсылка.DL_RES_Free;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодразделениеКурса(РазделГуидВБазе, Знач РазделСсылка)
	
	Если ТипСайта = "dist" Тогда
		РазделГуидВБазе = РазделСсылка.Dist;
	Иначе
		РазделГуидВБазе = РазделСсылка.Free;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеКЗаписи()
	
	Для Каждого СтрКурс Из ДанныеДляЗагрузкиВРегистр Цикл
		
		Если ЗначениеЗаполнено(СтрКурс.Курс) Тогда
			Продолжить;
		КонецЕсли;
		
		КурсЭлемент = Справочники.ТС_Курсы.СоздатьГруппу();
		КурсЭлемент.Наименование = СтрКурс.КурсНаименование;
		КурсЭлемент.Родитель = РодительКурса;
		
		КурсЭлемент.Записать();
		
		СтрКурс.Курс = КурсЭлемент.Ссылка;
		
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеВРегистр()
	
	НачатьТранзакцию();
	
	Для Каждого СтрКурс Из ДанныеДляЗагрузкиВРегистр Цикл
		
		МенеджерЗаписи = РегистрыСведений.ПараметрыФормированияЗапросаДляОбновленияТестов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрКурс);
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры


