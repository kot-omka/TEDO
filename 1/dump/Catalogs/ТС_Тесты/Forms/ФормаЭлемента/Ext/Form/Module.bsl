
#Область ПеременныеФормы

///////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ФОРМЫ

//*************************************************************
&НаКлиенте
Перем ВладелецДоВыбора;

#КонецОбласти


#Область СобытияФормы
///////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

//*************************************************************
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Заполним параметры, если это новый элемент
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Актуальный = Истина;
		Если Параметры.Свойство("Владелец") Тогда
			Объект.Владелец = Параметры.Владелец;
		КонецЕсли;
		Если Параметры.Свойство("Родитель") Тогда
			Объект.Родитель = Параметры.Родитель;
		КонецЕсли;
		Если Параметры.Свойство("Наименование") Тогда
			Объект.Наименование = Параметры.Наименование;
		КонецЕсли;
		
		Если Найти(Объект.Родитель, "01") Тогда
			Объект.Наименование = "8470_01";
		ИначеЕсли Найти(Объект.Родитель, "02") Тогда
			Объект.Наименование = "8470_02"; 
		ИначеЕсли Найти(Объект.Родитель, "03") Тогда
			Объект.Наименование = "8470_03"; 
		ИначеЕсли Найти(Объект.Родитель, "04") Тогда
			Объект.Наименование = "8470_04"; 
		ИначеЕсли Найти(Объект.Родитель, "05") Тогда
			Объект.Наименование = "8470_05"; 
		ИначеЕсли Найти(Объект.Родитель, "06") Тогда
			Объект.Наименование = "8470_06"; 
		ИначеЕсли Найти(Объект.Родитель, "07") Тогда
			Объект.Наименование = "8470_07"; 
		ИначеЕсли Найти(Объект.Родитель, "08") Тогда
			Объект.Наименование = "8470_08"; 
		ИначеЕсли Найти(Объект.Родитель, "09") Тогда 
			Объект.Наименование = "8470_09"; 
		ИначеЕсли Найти(Объект.Родитель, "10") Тогда 
			Объект.Наименование = "8470_10"; 
		ИначеЕсли Найти(Объект.Родитель, "11") Тогда 
			Объект.Наименование = "8470_11"; 
		ИначеЕсли Найти(Объект.Родитель, "12") Тогда 
			Объект.Наименование = "8470_12"; 
		ИначеЕсли Найти(Объект.Родитель, "13") Тогда 
			Объект.Наименование = "8470_13"; 
		ИначеЕсли Найти(Объект.Родитель, "14") Тогда 
			Объект.Наименование = "8470_14"; 
		Иначе Объект.Наименование = "8470_";
		КонецЕсли;
		Объект.ДатаДобавления = ТекущаяДата();
		Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
		Объект.СоздательФайла = Справочники.ТС_Пользователи.НайтиПоНаименованию(Пользователь.ПолноеИмя);
		//Объект.Наименование = ТС_ОбщегоНазначенияСервер.ПолучитьСледующийКод(Объект.Родитель);
		Если Параметры.Свойство("Вопрос") Тогда
			Объект.Вопрос = Параметры.Вопрос;
		КонецЕсли;
		Если Параметры.Свойство("Ответы") Тогда
			ТекОтветы = Параметры.Ответы;
			Если ТипЗнч(ТекОтветы) = Тип("СписокЗначений") Тогда
				Для сч = 0 По ТекОтветы.Количество()-1 Цикл
					НовыйОтвет = Объект.Ответы.Добавить();
					НовыйОтвет.Ответ = ТекОтветы.Получить(сч);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	//отображение картинки при открытии формы справочника
	Если ЗначениеЗаполнено(Объект.Изображение) Тогда
		Изображение = ПолучитьНавигационнуюСсылку(Объект.Изображение, "Изображение");
		Элементы.Изображение.Видимость = Истина;
		Элементы.ОткрытьИзображение.Видимость = Истина;
		Элементы.УдалитьИзображение.Видимость = Истина;
		
		СтруктураИмен = Новый Структура;
		СтруктураИмен.Вставить("НовыйОбъект", "НовыйОбъектСсылка");
		
		ДобавляемыеРеквизиты = Новый Массив;
		КартинкаТест = ПолучитьНавигационнуюСсылку(Объект.Изображение, "Изображение");
		ИмяРеквизита = "Картинка" + СтруктураИмен.НовыйОбъект;
		Реквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка"),
	        Объект,
	        ИмяРеквизита);
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		Реквизит = КартинкаТест;
		
		пЭлементПолеИсполнительИзображениеВКарточкеЗадачи = Элементы.Вставить(СтруктураИмен.НовыйОбъект,Тип("ПолеФормы"),,Неопределено);
		пЭлементПолеИсполнительИзображениеВКарточкеЗадачи.Вид = ВидПоляФормы.ПолеВвода;
		//пЭлементПолеИсполнительИзображениеВКарточкеЗадачи.ПутьКДанным = ИмяРеквизита;
		пЭлементПолеИсполнительИзображениеВКарточкеЗадачи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		пЭлементПолеИсполнительИзображениеВКарточкеЗадачиКартинка = Элементы.Вставить(СтруктураИмен.НовыйОбъект+"Картинка",Тип("ПолеФормы"));
		пЭлементПолеИсполнительИзображениеВКарточкеЗадачиКартинка.Вид = ВидПоляФормы.ПолеКартинки;
		//пЭлементПолеИсполнительИзображениеВКарточкеЗадачиКартинка.ПутьКДанным = ИмяРеквизита;
		пЭлементПолеИсполнительИзображениеВКарточкеЗадачиКартинка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
	Иначе
		Элементы.Изображение.Видимость = Ложь;
		Элементы.ОткрытьИзображение.Видимость = Ложь;
		Элементы.УдалитьИзображение.Видимость = Ложь;
	КонецЕсли;
		
	ВладелецПриИзмененииСервер();
	
КонецПроцедуры

//*************************************************************
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВладелецДоВыбора = Объект.Владелец;
	
	ПодключитьБиблиотеку();
	
КонецПроцедуры

#КонецОбласти


#Область Служебные

//*************************************************************
//&НаСервере
//Гладилов 31.03.2021 изменено.
&НаСервереБезКонтекста
Функция ПолучитьПараметрСеансаНаСервере(ПараметрСеанса)
	
	Возврат ТС_ОбщегоНазначенияСервер.ПолучитьПараметрСеанса(ПараметрСеанса);
	
КонецФункции

//*************************************************************
&НаСервере
Процедура УстановитьПараметрСеансаНаСервере(ПараметрСеанса,Значение)
	
	ТС_ОбщегоНазначенияСервер.УстановитьПараметрСеанса(ПараметрСеанса,Значение);
	
КонецПроцедуры

//*************************************************************
&НаСервере
Функция ПолучитьКонстантуНаСервере(Константа)
	
	Возврат ТС_ОбщегоНазначенияСервер.ПолучитьКонстанту(Константа);
	
КонецФункции

//*************************************************************
&НаСервере
Процедура УстановитьКонстантуНаСервере(Константа,Значение)
	
	ТС_ОбщегоНазначенияСервер.УстановитьКонстанту(Константа,Значение);
	
КонецПроцедуры

//*************************************************************
// Функция - Получить макет на сервере
//
// Параметры:
//  ИмяМакета	 - строка	 - имя макета
// 
// Возвращаемое значение:
// макет  - макет
//
&НаСервере
Функция ПолучитьМакетНаСервере(ИмяМакета)
	
	Макет = Неопределено;
	Попытка
		ТекОбъект = РеквизитФормыВЗначение("Объект");
		Макет = ТекОбъект.ПолучитьМакет(ИмяМакета);
	Исключение
		Сообщить(ОписаниеОшибки());		
	КонецПопытки;
	Возврат Макет;
	
КонецФункции

#КонецОбласти


#Область ДействияФормы

///////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ ФОРМЫ

//*************************************************************
&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ВладелецДоВыбора <> Объект.Владелец 
		И УдалитьТестИзВсехНаборов("Проверить") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВладелецПриИзмененииЗавершение",ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения,
			"Внимение! Текущий тест будет удален из всех наборов тестов, продолжить?",РежимДиалогаВопрос.ДаНет,,,,);
	КонецЕсли;
	
КонецПроцедуры

//*************************************************************
&НаКлиенте
Процедура ВладелецПриИзмененииЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.Владелец = ВладелецДоВыбора;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ВладелецПриИзмененииСервер();
		УдалитьТестИзВсехНаборов("Удалить");
	КонецЕсли;	
		
КонецПроцедуры

//*************************************************************
&НаСервере
Процедура ВладелецПриИзмененииСервер()
	
	//Запомним множественные ответа для данного курса;
	ЭтаФорма.МножественныеОтветы = Объект.Владелец.МножественныеОтветы;
	ОбновитьРасшифровкуПравильногоОтвета();
	
КонецПроцедуры

//*************************************************************
&НаКлиенте
Процедура ОтветыПравильныйПриИзменении(Элемент)
	
	ОбновитьРасшифровкуПравильногоОтвета();
	
КонецПроцедуры

//*************************************************************
&НаСервере
Процедура ОбновитьРасшифровкуПравильногоОтвета()
	
	//Найдем все правильные ответы
	МассивОтветов = Новый Массив;
	Для Каждого Ответ Из Объект.Ответы Цикл
		Если Ответ.Правильный Тогда
			МассивОтветов.Добавить(Ответ.НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ПравильныхОтветовМинусОдин = МассивОтветов.Количество() - 1;
	Если ПравильныхОтветовМинусОдин = -1 Тогда
		ТекстРасшифровки = "Укажите хотя бы один правильный ответ.";
	Иначе	
		//Если разрешены множественные ответы	
		Если ЭтаФорма.МножественныеОтветы Тогда
			Если ПравильныхОтветовМинусОдин = 0 Тогда
				ТекстРасшифровки = 
				"Правильным ответом будет считаться выбор ответа " + МассивОтветов.Получить(0) + ".";
			Иначе
				ТекстРасшифровки =
				"Правильным ответом будет считаться одновременный выбор ответов: ";
				Для Сч = 0 По ПравильныхОтветовМинусОдин Цикл
					ТекстРасшифровки = ТекстРасшифровки + МассивОтветов.Получить(Сч) + 
					?(Сч=ПравильныхОтветовМинусОдин,".",", ");
				КонецЦикла;
			КонецЕсли;	
		Иначе
			Если ПравильныхОтветовМинусОдин = 0 Тогда
				ТекстРасшифровки = 
				"Правильным ответом будет считаться выбор ответа " + МассивОтветов.Получить(0) + ".";
			Иначе
				ТекстРасшифровки =
				"Правильным ответом будет считаться выбор любого из ответов: ";
				Для Сч = 0 По ПравильныхОтветовМинусОдин Цикл
					ТекстРасшифровки = ТекстРасшифровки + МассивОтветов.Получить(Сч) + 
					?(Сч=ПравильныхОтветовМинусОдин,".",", ");
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	ЭтаФорма.Элементы.РасшифровкаПравильногоОтвета.Заголовок = ТекстРасшифровки;
	
КонецПроцедуры

//*************************************************************
&НаСервере
Функция УдалитьТестИзВсехНаборов(Режим)
	
	//Вызывается 2 раза, т. к. смена владельца теста, очень редкое явление.
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;		
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборТестовСодержание.Ссылка
	|ИЗ
	|	Справочник.ТС_НаборыТестов.Содержание КАК НаборТестовСодержание
	|ГДЕ
	|	НаборТестовСодержание.Тест = &Тест";
	
	Запрос.УстановитьПараметр("Тест", Объект.Ссылка);	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если Режим = "Проверить" Тогда
		Возврат ВыборкаДетальныеЗаписи.Следующий();
	ИначеЕсли Режим = "Удалить" Тогда	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НаборТестов = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Для Каждого СтрокаТест Из НаборТестов.Содержание Цикл
				Если СтрокаТест.Тест = Объект.Ссылка Тогда
					НаборТестов.Содержание.Удалить(СтрокаТест.НомерСтроки-1);
				КонецЕсли;
			КонецЦикла;
			Попытка
				НаборТестов.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;	
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции	

//*************************************************************
&НаКлиенте
Процедура ЗагрузитьИзображение(Команда)
	
	ИмяФайла = "";
	ПутьФайла = "";
	
	//Вызываем Диалоговое окно и помещаем файл 
	//Картинки из локальной файловой системы во временное хранилище
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзображениеЗавершение",ЭтаФорма);
	НачатьПомещениеФайла(ОписаниеОповещения,ПутьФайла,ИмяФайла, Истина); 
	
КонецПроцедуры

//*************************************************************
&НаКлиенте
Процедура ЗагрузитьИзображениеЗавершение(Результат, Адрес, ИмяФайла, Параметры) Экспорт

	Если Результат Тогда
		
		Изображение = Адрес;
		ЗагрузитьИзображениеСервер();
		
	КонецЕсли;	
	
КонецПроцедуры

//*************************************************************
&НаСервере
Процедура ЗагрузитьИзображениеСервер()
	
	//создаем новый элемент в Справочнике Файлы
	НовыйФайлИзображения = Справочники.ТС_Файлы.СоздатьЭлемент();
	НовыйФайлИзображения.Наименование = "Изображение к тесту: " + Строка(Объект.Владелец) + ", " + Строка(Объект.Наименование);
	НовыйФайлИзображения.Источник = Объект.Ссылка;
	
	//в реквизит СправочникаФайлы Файл помещаем выбранную ранее Картинку
	НовыйФайлИзображения.Изображение = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Изображение));
	Изображение = ПоместитьВоВременноеХранилище(НовыйФайлИзображения.Изображение.Получить());
	
	//записываем новый элемент справочника Файлы
	Попытка
		НовыйФайлИзображения.Записать();
		ЭтаФорма.Модифицированность = Истина;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	//Удалим старое изображение, если оно было 
	УдалитьИзображениеСервер();

	//устанавливаем значение реквизита Картинка Справочника Сотрудники
	Объект.Изображение = НовыйФайлИзображения.Ссылка;
	Элементы.Изображение.Видимость = Истина;
	Элементы.УдалитьИзображение.Видимость = Истина;
	Элементы.ОткрытьИзображение.Видимость = Истина;
	
КонецПроцедуры

//*************************************************************
&НаКлиенте
Процедура УдалитьИзображение(Команда)
	
	//Спросим пользователя
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьИзображениеЗавершение",ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения,
		"Вы действительно хотите безвозвратно удалить изображение?",
		РежимДиалогаВопрос.ДаНет);	
	
КонецПроцедуры
	
//*************************************************************
&НаКлиенте
Процедура УдалитьИзображениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьИзображениеСервер();
		Элементы.Изображение.Видимость = Ложь;
		Элементы.УдалитьИзображение.Видимость = Ложь;
		Элементы.ОткрытьИзображение.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//*************************************************************
&НаСервере
Процедура УдалитьИзображениеСервер()
	
	Если НЕ Объект.Изображение.Пустая() 
		И Объект.Изображение.ПолучитьОбъект() <> Неопределено Тогда
		СтарыйФайлИзображения = Объект.Изображение.ПолучитьОбъект();
		Попытка
			СтарыйФайлИзображения.Удалить();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		Объект.Изображение = Справочники.ТС_Файлы.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

//*************************************************************
&НаКлиенте
Процедура ОткрытьИзображение(Команда)
	
	СтруктураПараметров = Новый Структура("Ключ",Объект.Изображение);
	ФормаИзображения = ПолучитьФорму("Справочник.ТС_Файлы.ФормаОбъекта", СтруктураПараметров);
	ФормаИзображения.Открыть();
	
КонецПроцедуры

#КонецОбласти


#Область Подсказка

///////////////////////////////////////////////////////////////
// БЛОК ПОДСКАЗКА

#Если ТонкийКлиент Тогда
	
//*************************************************************
// Процедура - Проверить инициализировать библиотеки 
// Выполняет необходимые процедуры подготовки для работы с визульаным html js редактором в тонком клиенте
//
// Параметры:
//  ИмяБиблиотеки	 - строка	 - наименование библиотеки визуального html редактора
//  КаталогВыгрузки	 - строка	 - путь к каталогу, для принудительной выгрузки
//
&НаКлиенте
Процедура ПодключитьБиблиотеку()
	
	НеобходимоИнициализироватьБиблиотеку = Истина;
	ПутьКБиблиотеке = ПолучитьПараметрСеансаНаСервере("ТС_ПутьTinyMCE");
	
	Если ЗначениеЗаполнено(ПутьКБиблиотеке) Тогда
		Файл = Новый Файл(ПутьКБиблиотеке);
		НеобходимоИнициализироватьБиблиотеку = НЕ Файл.Существует();
	КонецЕсли;
	
	Если НеобходимоИнициализироватьБиблиотеку Тогда
		
		ПутьКБиблиотеке = КаталогВременныхФайлов()+"TinyMCE\"; 				
		СоздатьКаталог(ПутьКБиблиотеке);
		
		// скопируем в каталог файлы из архива
		МакетБиблиотеки = ПолучитьМакетНаСервере("TinyMCE");
		МакетБиблиотекиEditorHTML = ПолучитьМакетНаСервере("TinyMCEEditorHTML");
		
		Если МакетБиблиотеки <> Неопределено И МакетБиблиотекиEditorHTML <> Неопределено Тогда
			// сохраняем и распаковываем редактор
			ИмяФайлаZip = "TinyMCE.zip";
			МакетБиблиотеки.Записать(ПутьКБиблиотеке+ИмяФайлаZip);
			ФайлАрхива = Новый ЧтениеZipФайла(ПутьКБиблиотеке+ИмяФайлаZip);
			ФайлАрхива.ИзвлечьВсе(ПутьКБиблиотеке, РежимВосстановленияПутейФайловZIP.Восстанавливать); 
			ФайлАрхива.Закрыть();		
			// сохраняем настроенный файл редактора
			ПутьКБиблиотеке = ПутьКБиблиотеке+"TinyMCEEditorHTML.html";
			МакетБиблиотекиEditorHTML.Записать(ПутьКБиблиотеке);
			УстановитьПараметрСеансаНаСервере("ТС_ПутьTinyMCE",ПутьКБиблиотеке);
		Иначе
			ПутьКБиблиотеке = "";
			Сообщить("Неизвестаная ошибка сохранения макета...");
		КонецЕсли;
		
	КонецЕсли;
	
	// Загрузим файл редактора
	РедактированиеПодсказки = ПутьКБиблиотеке;
	
КонецПроцедуры

#ИначеЕсли ВебКлиент Тогда

//*************************************************************
// Процедура - Проверить инициализировать библиотеки 
// Выполняет необходимые процедуры подготовки для работы с визульаным html js редактором в веб клиенте
//
// Параметры:
//  ИмяБиблиотеки	 - строка	 - наименование библиотеки визуального html редактора
//
&НаКлиенте
Процедура ПодключитьБиблиотеку()
	
	// проверим указание веб адреса каталога, где находятся библиотеки (пользователь размещает их вручную)
	
	// установим по умолчанию
	ВебПутьДляБиблиотек = ПолучитьКонстантуНаСервере("ТС_ВебПутьДляБиблиотек");
	Если Не ЗначениеЗаполнено(ВебПутьДляБиблиотек) Тогда
		ВебПутьДляБиблиотек = "http://localhost/";
		УстановитьКонстантуНаСервере("ТС_ВебПутьДляБиблиотек",ВебПутьДляБиблиотек);
	КонецЕсли;
	
	// загрузим файл редактора
	РедактированиеПодсказки = ВебПутьДляБиблиотек+"TinyMCEEditorHTML.html";
	
КонецПроцедуры

#Иначе

//*************************************************************
// Процедура - Проверить инициализировать библиотеки 
// заглушка для других случаев 
//
// Параметры:
//  ИмяБиблиотеки	 - строка	 - наименование библиотеки визуального html редактора
//
&НаКлиенте
Процедура ПодключитьБиблиотеку()
	
КонецПроцедуры

#КонецЕсли

//*************************************************************
&НаКлиенте
Процедура РедактированиеПодсказкиДокументСформирован(Элемент)
	
	Попытка
		
		#Если ТонкийКлиент Тогда
			
			Если ЗначениеЗаполнено(Элементы.РедактированиеПодсказки.Документ.body.outerHTML) Тогда  
				ПолеРедактора = Элементы.РедактированиеПодсказки.Документ.getElementById("editor1");
				Если ПолеРедактора<>Неопределено Тогда
					ПолеРедактора.innerHTML = Объект.Подсказка;
				КонецЕсли;			
			КонецЕсли;
			
		#ИначеЕсли ВебКлиент Тогда
			
			Если ЗначениеЗаполнено(Элементы.РедактированиеПодсказки.Документ.body.outerHTML) Тогда  
				ПолеРедактора = Элементы.РедактированиеПодсказки.Документ.getElementById("editor1");
				Если ПолеРедактора<>Неопределено Тогда
					УстановитьКодHtmlJS(Объект.Подсказка);
				КонецЕсли;			
			КонецЕсли;

			
		#КонецЕсли
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

//*************************************************************
&НаКлиенте
Процедура ВидПодсказкиДокументСформирован(Элемент)
	
	ВидПодсказки = 
	"<html>
	|<body>
	|" + Объект.Подсказка + "
	|</body>
	|</html>";
	
КонецПроцедуры


//*************************************************************
// Функция - Получить код html JS
// Выполняет процедуру получения данных по средством JS из активного редактора
//
// Параметры:
//  ИмяРедактора - строка - определяет тип редактора
// 
// Возвращаемое значение:
//  строка - иходный html код в редакторе
//
&НаКлиенте
Функция ПолучитьКодHtmlJS()
	
	html = "";
	
	#Если ТонкийКлиент Тогда
		html = Элементы.РедактированиеПодсказки.Документ.parentWindow.eval("tinyMCE.activeEditor.getContent();");
	#ИначеЕсли ВебКлиент Тогда
		// совместимо до версии IE 9, судя по данным инета
		Попытка // это для ИЕ
			html = Элементы.РедактированиеПодсказки.Документ.parentWindow.eval("tinyMCE.activeEditor.getContent();");
		Исключение
			html = Элементы.РедактированиеПодсказки.Документ.defaultView.eval("tinyMCE.activeEditor.getContent();");
		КонецПопытки;
	#КонецЕсли
		
	Возврат html;
	
КонецФункции

//*************************************************************
// Процедура - Установить код html JS
// Устанавливает код
//
// Параметры:
//  ИмяРедактора - строка - тип редактора (допустимые типы: CkEditor, TinyMCE)
//  html		 - строка - текст html
//
&НаКлиенте
Процедура УстановитьКодHtmlJS(Знач html)
	
	#Если ТонкийКлиент Тогда
		html = СтрЗаменить(html,Символы.ПС," ");
		Элементы.РедактированиеПодсказки.Документ.parentWindow.eval("tinyMCE.activeEditor.setContent('"+html+"');");
	#ИначеЕсли ВебКлиент Тогда
		// совместимо до версии IE 9, судя по данным инета
		html = СтрЗаменить(html,Символы.ПС," ");
		Попытка
			Элементы.РедактированиеПодсказки.Документ.parentWindow.eval("tinyMCE.activeEditor.setContent('"+html+"');");
		Исключение
			Элементы.РедактированиеПодсказки.Документ.defaultView.eval("tinyMCE.activeEditor.setContent('"+html+"');");
		КонецПопытки;
	#КонецЕсли
	
КонецПроцедуры

//*************************************************************
&НаКлиенте
Процедура ПодсказкаПриИзменении(Элемент)
	
	ВидПодсказкиДокументСформирован(Неопределено);
	УстановитьКодHtmlJS(Объект.Подсказка);	
	
КонецПроцедуры

//*************************************************************
&НаКлиенте
Процедура СохранитьПодсказку(Команда)
	
	Объект.Подсказка = ПолучитьКодHtmlJS();
	ПодсказкаПриИзменении(Неопределено);
	
КонецПроцедуры

//*************************************************************
&НаКлиенте
Процедура ПодсказкаОбработатьНаКавычки(Команда)
	
	//Обработаем на кавычки
	СохранитьПодсказку(Неопределено);	
	
	БылаОткрывающаяКавычка = Ложь;
	ТекСтрока = СокрЛП(Объект.Подсказка);
	
	НомерКавычки = Найти(ТекСтрока,"&quot;");
	Если НомерКавычки = 0 Тогда
		НомерКавычки = Найти(ТекСтрока,"""");
	КонецЕсли;	
	Пока НомерКавычки > 0 Цикл
		Если БылаОткрывающаяКавычка Тогда
			ТекСтрока = Лев(ТекСтрока,НомерКавычки-1) + "»" + Сред(ТекСтрока,НомерКавычки+1);
			БылаОткрывающаяКавычка = Ложь;
		Иначе
			ТекСтрока = Лев(ТекСтрока,НомерКавычки-1) + "«" + Сред(ТекСтрока,НомерКавычки+1);
			БылаОткрывающаяКавычка = Истина;
		КонецЕсли;
		НомерКавычки = Найти(ТекСтрока,"""");
	КонецЦикла;
	
	Если БылаОткрывающаяКавычка Тогда
		Сообщить("Ошибка в строке: " + ТекСтрока);	
	КонецЕсли;
	
	//Обработаем на двоейные пробебы
	Для сч = 1 По 10 Цикл
		ТекСтрока = СтрЗаменить(ТекСтрока,"  "," ");
	КонецЦикла;
	
	//Обработаем на специальные символы
	//ТекСтрока = СтрЗаменить(ТекСтрока,"&","&amp;");
	//ТекСтрока = СтрЗаменить(ТекСтрока,"'","&apos;");
	
	Объект.Подсказка = ТекСтрока;
	ПодсказкаПриИзменении(Неопределено);

КонецПроцедуры

#КонецОбласти




		
		
		
	
	
