&НаКлиенте
//*********************************************************
Процедура ПутьНаКлиентеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите папку исходных данных";
	Диалог.Фильтр = "Файл выгрузки (*.json)|*.json";;
	Диалог.МножественныйВыбор = Истина;

	Если Диалог.Выбрать() Тогда		
		ЭтаФорма.ПутьНаКлиенте = Диалог.Каталог;	
		ФайлыДляЗагрузки.Очистить();
		Для Каждого ТекущийФайл Из Диалог.ВыбранныеФайлы Цикл
			НоваяСтрока = ФайлыДляЗагрузки.Добавить();
			НоваяСтрока.ИмяФайла = ТекущийФайл;
		КонецЦикла;
		ФайлыДляЗагрузки.Сортировать("ИмяФайла");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//*********************************************************
Процедура Загрузить(Команда)
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ПутьНаКлиенте) Тогда
		ПоказатьПредупреждение(,"Не указан путь к файлу!");
		Возврат;
	КонецЕсли;
	
	ЗагрузитьФайлыНаСервере();

КонецПроцедуры

&НаСервере
//*********************************************************
Процедура ЗагрузитьФайлыНаСервере()
	//Параметры лог-файла
	Результат.Очистить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ТекОбъект.ПолучитьМакет("Результат");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьОшибка = Макет.ПолучитьОбласть("Ошибка");
	
	//Выведем шапку
	ОбластьШапка.Параметры.Текст = "Процедура загрузки данных. Время начала: " + ТекущаяДата();
	Результат.Вывести(ОбластьШапка);
	
	ПрошлыйТипОбъкта = "";
	ТекстЗаголовка = "";
	КоличествоЭлементовДобавленоВсего = 0;
	КоличествоЭлементовОбновленоВсего = 0;
	КоличествоЭлементовВсего = 0;
	ТекФайл = Неопределено;
	СтруктураТабДок = Новый Структура("ТабДокумент, Макет, КоличествоЭлементов, КоличествоЭлементовДобавлено, КоличествоЭлементовОбновлено, БылиОшибки", ТабДокумент, Макет, 0, 0, 0, Ложь);
	Попытка
		Для Каждого ТекущийФайл Из ФайлыДляЗагрузки Цикл
			ТекФайл = ТекущийФайл.ИмяФайла;
			Попытка
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.ОткрытьФайл(ТекущийФайл.ИмяФайла);
				Данные = ПрочитатьJSON(ЧтениеJSON);
				Если СтрНайти(ТекущийФайл.ИмяФайла, "topics") > 0 Тогда
					ЗагрузитьСтруктуруНаСервере(Данные, СтруктураТабДок);
				ИначеЕсли СтрНайти(ТекущийФайл.ИмяФайла, "all-data") > 0 Тогда
					
				Иначе
					ЗагрузитьВопросыНаСервере(Данные, СтруктураТабДок);
				КонецЕсли;
				КоличествоЭлементовВсего = КоличествоЭлементовВсего + СтруктураТабДок.КоличествоЭлементов;
				КоличествоЭлементовОбновленоВсего = КоличествоЭлементовОбновленоВсего + СтруктураТабДок.КоличествоЭлементовОбновлено;
				КоличествоЭлементовДобавленоВсего = КоличествоЭлементовДобавленоВсего + СтруктураТабДок.КоличествоЭлементовДобавлено;
				ЧтениеJSON.Закрыть();
				ТекущийФайл.Обработан = Истина;
			Исключение
				Возврат;
			КонецПопытки;
		КонецЦикла;
		ТабДокумент = СтруктураТабДок.ТабДокумент;
		Если СтруктураТабДок.КоличествоЭлементов <> 0
			ИЛИ СтруктураТабДок.БылиОшибки Тогда
			Результат.НачатьАвтогруппировкуСтрок();
			ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
			ОбластьЗаголовок.Параметры.Текст = ТекстЗаголовка;
			ОбластьЗаголовок.Параметры.Количество = СтруктураТабДок.КоличествоЭлементов;
			Результат.Вывести(ОбластьЗаголовок,0);
			Результат.Вывести(ТабДокумент,1);
			Результат.ЗакончитьАвтогруппировкуСтрок();
			ОбластьПропуск = Макет.ПолучитьОбласть("Пропуск");
			Результат.Вывести(ОбластьПропуск);
			ТабДокумент.Очистить();
		КонецЕсли;	
		
		Если НЕ СтруктураТабДок.БылиОшибки Тогда
			
			//Запишем успех в файл
			Результат.Область("R2C2").Текст = "Успешное завершение!";
			Результат.Область("R2C2").ЦветТекста = Новый Цвет(0, 128, 0);
			ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
			ОбластьПодвал.Параметры.КоличествоЭлементовВсего = КоличествоЭлементовВсего;
			ОбластьПодвал.Параметры.КоличествоЭлементовОбновленоВсего = КоличествоЭлементовОбновленоВсего;
			ОбластьПодвал.Параметры.КоличествоЭлементовДобавленоВсего = КоличествоЭлементовДобавленоВсего;
			ОбластьПодвал.Параметры.Текст = "Процедура загрузки. Время завершения: " + ТекущаяДата();
			Результат.Вывести(ОбластьПодвал);
			Результат.ПоказатьУровеньГруппировокСтрок(0);	
			Возврат;
		Иначе
			Возврат;
		КонецЕсли;
		
	Исключение
		
		ОбластьОшибка = Макет.ПолучитьОбласть("Ошибка");
		ОбластьОшибка.Параметры.Текст = ОписаниеОшибки();
		Результат.Вывести(ОбластьОшибка);
		ОбластьПропуск = Макет.ПолучитьОбласть("Пропуск");
		Результат.Вывести(ОбластьПропуск);;
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
//*********************************************************
Процедура ЗагрузитьСтруктуруНаСервере(Данные, СтруктураТабДок)
	
	//Глобальная локация
	//Программа
	//Раздел
	ГлобальнаяЛокацияМасс = Данные;
	Для Каждого ГлобальнаяЛокация Из ГлобальнаяЛокацияМасс Цикл
		СтруктураДанныхГЛ = Новый Структура("Наименование, ID, ЭтоГруппа, РодительID", ГлобальнаяЛокация.T, ГлобальнаяЛокация.ID, Истина, Неопределено);
		Если НЕ ЗагрузитьКурсJSON(СтруктураДанныхГЛ,СтруктураТабДок) Тогда
			БылиОшибки = Истина;
			Прервать;
		КонецЕсли;       
		Если ГлобальнаяЛокация.C = 0 Тогда Продолжить; КонецЕсли;
		ПрограммаМасс = ГлобальнаяЛокация.TList;
		Если ГлобальнаяЛокация.C = 15 И ПрограммаМасс.Количество() = 15 Тогда
			//ЗагрузкаВеткиТестов 
			Для Каждого Программа Из ПрограммаМасс Цикл
				//СтруктураДанныхП = Новый Структура("Наименование, ID, ЭтоГруппа, РодительID", Программа.T, Программа.ID, Истина, ГлобальнаяЛокация.ID);
				СтруктураДанныхП = Новый Структура("Вопрос, ID, Владелец, ЭтоГруппа, Родитель, Подсказка, Ответы, Правильный", Программа.T, Программа.ID, ГлобальнаяЛокация.ID, Истина, Неопределено);
				Если НЕ ЗагрузитьТестJSON(СтруктураДанныхП,СтруктураТабДок) Тогда
					СтруктураТабДок.БылиОшибки = Истина;
					Прервать;
				КонецЕсли;
				Если Программа.C = 0 Тогда Продолжить; КонецЕсли;
				РазделМасс = Программа.TList;
				Для Каждого Раздел Из РазделМасс Цикл
					//СтруктураДанныхР = Новый Структура("Вбопрос, ID, ЭтоГруппа, РодительID", Раздел.T, Раздел.ID, Ложь, Программа.ID);
					СтруктураДанныхР = Новый Структура("Вопрос, ID, Владелец, ЭтоГруппа, Родитель, Подсказка, Ответы, Правильный", Раздел.T, Раздел.ID, Программа.ID, Истина, Программа.T);
					Если НЕ ЗагрузитьТестJSON(СтруктураДанныхР,СтруктураТабДок) Тогда
						СтруктураТабДок.БылиОшибки = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		Иначе
			//ЗагрузкаКурса
			Для Каждого Программа Из ПрограммаМасс Цикл
				СтруктураДанныхП = Новый Структура("Наименование, ID, ЭтоГруппа, РодительID", Программа.T, Программа.ID, Истина, ГлобальнаяЛокация.ID);
				Если НЕ ЗагрузитьКурсJSON(СтруктураДанныхП,СтруктураТабДок) Тогда
					СтруктураТабДок.БылиОшибки = Истина;
					Прервать;
				КонецЕсли;
				Если Программа.C = 0 Тогда Продолжить; КонецЕсли;
				РазделМасс = Программа.TList;
				Если Программа.C = 15 И РазделМасс.Количество() = 15 Тогда
					//ЗагрузкаВеткиТестов 
					РазделМасс = Программа.TList;
					Владелец = НайтиСправочникПоGUID(Программа.ID,"ТС_Курсы");
					Для Каждого Раздел Из РазделМасс Цикл
						//СтруктураДанныхР = Новый Структура("Вопрос, ID, ЭтоГруппа, РодительID", Раздел.T, Раздел.ID, Ложь, Программа.ID);
						СтруктураДанныхР = Новый Структура("Вопрос, ID, Владелец, ЭтоГруппа, Родитель, Подсказка, Ответы, Правильный", Раздел.T, Раздел.ID, Программа.ID, Истина, Программа.T);
						Если НЕ ЗагрузитьТестJSON(СтруктураДанныхР,СтруктураТабДок) Тогда
							СтруктураТабДок.БылиОшибки = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Для Каждого Раздел Из РазделМасс Цикл
						//СтруктураДанныхР = Новый Структура("Вопрос, ID, ЭтоГруппа, РодительID", Раздел.T, Раздел.ID, Ложь, Программа.ID);
						СтруктураДанныхР = Новый Структура("Вопрос, ID, Владелец, ЭтоГруппа, Родитель, Подсказка, Ответы, Правильный", Раздел.T, Раздел.ID, Программа.ID, Истина, Программа.T);
						Если НЕ ЗагрузитьТестJSON(СтруктураДанныхР,СтруктураТабДок) Тогда
							СтруктураТабДок.БылиОшибки = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
//*********************************************************
Процедура ЗагрузитьВопросыНаСервере(Данные, СтруктураТабДок)
	
	//Раздел
	//Вопросы
	//Варианты ответов
	Если Сред(Данные.T, 1,3) = "15." Тогда 
		Возврат; 
	КонецЕсли;
	СтруктураДанныхР = Новый Структура("Наименование, ID, ЭтоГруппа, РодительID", Данные.T, Данные.ID, Истина);
	Раздел = НайтиСправочникПоGUID(Данные.ID,"ТС_Тесты");
	Если Не ЗначениеЗаполнено(Раздел) Тогда
		СтруктураТабДок.БылиОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	ВопросыМасс = Данные.QList;
	Для Каждого ТекВопрос Из ВопросыМасс Цикл
		ПутьДоGUID = ТекВопрос.P;
		GUID = Сред(ПутьДоGUID, СтрНайти(ПутьДоGUID, "Vopros___") + 9, 10);
		СтруктураДанныхТ = Новый Структура("Вопрос, ID, Владелец, ЭтоГруппа, Родитель, Подсказка, Ответы, Правильный", СокрЛП(ТекВопрос.Q), GUID, Неопределено, Ложь, Раздел, СтрЗаменить(ТекВопрос.H, "##Подсказка: ", ""), ТекВопрос.V, ТекВопрос.A);
		Если НЕ ЗагрузитьТестJSON(СтруктураДанныхТ,СтруктураТабДок) Тогда
			СтруктураТабДок.БылиОшибки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
//*********************************************************
Функция НайтиСправочникПоGUID(GUID,ТипСправочника,Владелец="")
	
	GUID = СокрЛП(GUID);
	
	СсылкаНаСпр = Справочники[ТипСправочника].ПолучитьСсылку(Новый УникальныйИдентификатор(GUID));
	
	Если Лев(Строка(СсылкаНаСпр),18) = "<Объект не найден>" Тогда
		Возврат Неопределено;
	Иначе
	    Возврат СсылкаНаСпр;
	КонецЕсли;
	
КонецФункции

&НаСервере
//*********************************************************
Функция ЗагрузитьКурсJSON(СтруктураДанных,СтруктураТабДок)
	
	ТабДокумент = СтруктураТабДок.ТабДокумент;
	Макет = СтруктураТабДок.Макет;
	КоличествоЭлементовОбновлено = 0;
	КоличествоЭлементовДобавлено = 0;

	Наименование = СтруктураДанных.Наименование;
	GUID = СтруктураДанных.ID;
	ЭтоГруппа = СтруктураДанных.ЭтоГруппа;
	РодительGUID = СтруктураДанных.РодительID;
	
	//Данные для лог-файла
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Попытка
		
		СпрСсылка = НайтиСправочникПоGUID(GUID,"ТС_Курсы");
		Если СпрСсылка = Неопределено Тогда
			Если ЭтоГруппа Тогда
				СпрОбъект = Справочники.ТС_Курсы.СоздатьГруппу();
			Иначе
				СпрОбъект = Справочники.ТС_Курсы.СоздатьЭлемент();
			КонецЕсли;
			типДействия = "Создан новый: ";
			НовыйGUID = Новый УникальныйИдентификатор(GUID);
			СпрОбъект.УстановитьСсылкуНового(Справочники.ТС_Курсы.ПолучитьСсылку(НовыйGUID));
			КоличествоЭлементовДобавлено = 1;
		Иначе
			СпрОбъект = СпрСсылка.ПолучитьОбъект();
			типДействия = "Обновлен: ";
		 	КоличествоЭлементовОбновлено = 1;
		КонецЕсли;
		
		//Общие реквизиты
		//Если СпрОбъект.Код <> ОбъектДанныхXDTO.Код Тогда
		//	СпрОбъект.Код = ОбъектДанныхXDTO.Код;
		//КонецЕсли;
		Если СпрОбъект.Наименование <> Наименование Тогда
			СпрОбъект.Наименование = Наименование;
		КонецЕсли;	
		Если ЗначениеЗаполнено(РодительGUID) Тогда
			СпрРодитель = НайтиСправочникПоGUID(РодительGUID,"ТС_Курсы");
			Если СпрРодитель <> Неопределено
				И СпрРодитель <> СпрОбъект.Родитель Тогда
				СпрОбъект.Родитель = СпрРодитель;
			КонецЕсли;
		КонецЕсли;
		//Реквизиты элемента
		Если НЕ ЭтоГруппа Тогда
			СпрОбъект.ДатаАктуальности = ТекущаяДата();
		КонецЕсли;
		
		Если СпрОбъект.Модифицированность() Тогда
			СпрОбъект.Записать();
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Текст = типДействия + СпрОбъект.Наименование;
			ОбластьСтрока.Параметры.Код = СпрОбъект.Код;
			ТабДокумент.Вывести(ОбластьСтрока);
			СтруктураТабДок.КоличествоЭлементов = СтруктураТабДок.КоличествоЭлементов + 1;;
		 	СтруктураТабДок.КоличествоЭлементовДобавлено = СтруктураТабДок.КоличествоЭлементовДобавлено + КоличествоЭлементовДобавлено;
		 	СтруктураТабДок.КоличествоЭлементовОбновлено = СтруктураТабДок.КоличествоЭлементовОбновлено + КоличествоЭлементовОбновлено;
		КонецЕсли;
		
		Возврат Истина;
				
	Исключение
		
		ОбластьОшибка = Макет.ПолучитьОбласть("Ошибка");
		ОбластьОшибка.Параметры.Текст = ОписаниеОшибки();
		ТабДокумент.Вывести(ОбластьОшибка);
		ОбластьПропуск = Макет.ПолучитьОбласть("Пропуск");
		ТабДокумент.Вывести(ОбластьПропуск);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

&НаСервере
//*********************************************************
Функция ЗагрузитьТестГруппаJSON(СтруктураДанных,СтруктураТабДок)
	
	ТабДокумент = СтруктураТабДок.ТабДокумент;
	Макет = СтруктураТабДок.Макет;
	КоличествоЭлементовОбновлено = 0;
	КоличествоЭлементовДобавлено = 0;

	Наименование = СтруктураДанных.Наименование;
	GUID = СтруктураДанных.ID;
	ЭтоГруппа = СтруктураДанных.ЭтоГруппа;
	РодительGUID = СтруктураДанных.РодительID;
	
	//Данные для лог-файла
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Попытка
		
		СпрСсылка = НайтиСправочникПоGUID(GUID,"ТС_Курсы");
		Если СпрСсылка = Неопределено Тогда
			Если ЭтоГруппа Тогда
				СпрОбъект = Справочники.ТС_Курсы.СоздатьГруппу();
			Иначе
				СпрОбъект = Справочники.ТС_Курсы.СоздатьЭлемент();
			КонецЕсли;
			типДействия = "Создан новый: ";
			НовыйGUID = Новый УникальныйИдентификатор(GUID);
			СпрОбъект.УстановитьСсылкуНового(Справочники.ТС_Курсы.ПолучитьСсылку(НовыйGUID));
			КоличествоЭлементовДобавлено = 1;
		Иначе
			СпрОбъект = СпрСсылка.ПолучитьОбъект();
			типДействия = "Обновлен: ";
		 	КоличествоЭлементовОбновлено = 1;
		КонецЕсли;
		
		//Общие реквизиты
		//Если СпрОбъект.Код <> ОбъектДанныхXDTO.Код Тогда
		//	СпрОбъект.Код = ОбъектДанныхXDTO.Код;
		//КонецЕсли;
		Если СпрОбъект.Наименование <> Наименование Тогда
			СпрОбъект.Наименование = Наименование;
		КонецЕсли;	
		Если ЗначениеЗаполнено(РодительGUID) Тогда
			СпрРодитель = НайтиСправочникПоGUID(РодительGUID,"ТС_Курсы");
			Если СпрРодитель <> Неопределено
				И СпрРодитель <> СпрОбъект.Родитель Тогда
				СпрОбъект.Родитель = СпрРодитель;
			КонецЕсли;
		КонецЕсли;
		//Реквизиты элемента
		Если НЕ ЭтоГруппа Тогда
			СпрОбъект.ДатаАктуальности = ТекущаяДата();
		КонецЕсли;
		
		Если СпрОбъект.Модифицированность() Тогда
			СпрОбъект.Записать();
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Текст = типДействия + СпрОбъект.Наименование;
			ОбластьСтрока.Параметры.Код = СпрОбъект.Код;
			ТабДокумент.Вывести(ОбластьСтрока);
			СтруктураТабДок.КоличествоЭлементов = СтруктураТабДок.КоличествоЭлементов + 1;;
		 	СтруктураТабДок.КоличествоЭлементовДобавлено = СтруктураТабДок.КоличествоЭлементовДобавлено + КоличествоЭлементовДобавлено;
		 	СтруктураТабДок.КоличествоЭлементовОбновлено = СтруктураТабДок.КоличествоЭлементовОбновлено + КоличествоЭлементовОбновлено;
		КонецЕсли;
		
		Возврат Истина;
				
	Исключение
		
		ОбластьОшибка = Макет.ПолучитьОбласть("Ошибка");
		ОбластьОшибка.Параметры.Текст = ОписаниеОшибки();
		ТабДокумент.Вывести(ОбластьОшибка);
		ОбластьПропуск = Макет.ПолучитьОбласть("Пропуск");
		ТабДокумент.Вывести(ОбластьПропуск);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

&НаСервере
//*********************************************************
Функция ЗагрузитьТестJSON(СтруктураДанных,СтруктураТабДок)

//Вопрос, Владелец, Подсказка, Ответы, Правильный
	ТабДокумент = СтруктураТабДок.ТабДокумент;
	Макет = СтруктураТабДок.Макет;
	КоличествоЭлементовОбновлено = 0;
	КоличествоЭлементовДобавлено = 0;
	Подсказка = СтруктураДанных.Подсказка;
	ЭтоГруппа = СтруктураДанных.ЭтоГруппа;
	Родитель = СтруктураДанных.Родитель;
	Ответы = СтруктураДанных.Ответы;
	Правильный = СтруктураДанных.Правильный;
	GUID = СтруктураДанных.ID; 
	Изображение = Неопределено;

	Вопрос = СтруктураДанных.Вопрос;
	Если ЭтоГруппа Тогда 
		Владелец = НайтиСправочникПоGUID(СтруктураДанных.Владелец,"ТС_Курсы");
	Иначе
		Если ЗначениеЗаполнено(Родитель) Тогда
			Владелец = Родитель.Владелец;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Владелец) Тогда 
		Возврат Ложь; 
	КонецЕсли;
	НачалоИзображения = СтрНайти(Вопрос, "<IMG data=");
	Если НачалоИзображения > 0 Тогда
		ОкончаниеИзображения = СтрНайти(Прав(Вопрос, СтрДлина(Вопрос) - НачалоИзображения), " />") - 1 ;
		ИзображениеДвоичныеДанныеСтрока = Сред(Вопрос, НачалоИзображения + 11, СтрДлина(Вопрос)-НачалоИзображения-11-3);
		ИзображениеДвоичныеДанныеСтрока = СтрЗаменить(ИзображениеДвоичныеДанныеСтрока, Символы.ВК, "");
		ИзображениеДвоичныеДанныеСтрока = СтрЗаменить(ИзображениеДвоичныеДанныеСтрока, Символы.ПС, "");
		Изображение = Base64Значение(ИзображениеДвоичныеДанныеСтрока);
		Вопрос = Сред(Вопрос,0 ,НачалоИзображения - 1);
	КонецЕсли;
	
	//Данные для лог-файла
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Попытка
		Если СтруктураДанных.ЭтоГруппа Тогда
			СпрСсылка = НайтиСправочникПоGUID(GUID,"ТС_Тесты");
		Иначе
			СпрСсылка = Справочники.ТС_Тесты.НайтиПоНаименованию(GUID,,,Владелец);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СпрСсылка) Тогда
			Если ЭтоГруппа Тогда
				СпрОбъект = Справочники.ТС_Тесты.СоздатьГруппу();
				СпрОбъект.Наименование = Вопрос;
				НовыйGUID = Новый УникальныйИдентификатор(GUID);
				СпрОбъект.УстановитьСсылкуНового(Справочники.ТС_Тесты.ПолучитьСсылку(НовыйGUID));
			Иначе
				СпрОбъект = Справочники.ТС_Тесты.СоздатьЭлемент();
				СпрОбъект.Наименование = GUID;
			КонецЕсли;
			типДействия = "Создан новый: ";
			КоличествоЭлементовДобавлено = 1;
		Иначе
			СпрОбъект = СпрСсылка.ПолучитьОбъект();
			типДействия = "Обновлен: ";
		 	КоличествоЭлементовОбновлено = 1;
		КонецЕсли;
		
		Если Не ЭтоГруппа Тогда
			//Общие реквизиты
			Если СпрОбъект.Вопрос <> Вопрос Тогда
				СпрОбъект.Вопрос = Вопрос;
			КонецЕсли;	
		КонецЕсли;
		Если ЗначениеЗаполнено(Владелец) Тогда
			СпрОбъект.Владелец = Владелец;
		КонецЕсли;
		Если ЗначениеЗаполнено(Родитель) Тогда
			СпрОбъект.Родитель = Родитель;
		КонецЕсли;
		Если СпрОбъект.Модифицированность() Тогда
			СпрОбъект.Записать();
		КонецЕсли;
		//Реквизиты элемента
		Если НЕ ЭтоГруппа Тогда
			Если ЗначениеЗаполнено(Подсказка) Тогда
				СпрОбъект.Подсказка = Подсказка;
			КонецЕсли;
			//Изображение
			Если ЗначениеЗаполнено(Изображение) Тогда
				СпрИзображение = Справочники.ТС_Файлы.НайтиПоНаименованию(GUID);
				Если ЗначениеЗаполнено(СпрИзображение) Тогда
					СпрИзображениеОбъект = СпрИзображение.ПолучитьОбъект();
				Иначе
					СпрИзображениеОбъект = Справочники.ТС_Файлы.СоздатьЭлемент();
					СпрИзображениеОбъект.Источник = СпрОбъект.Ссылка;
					СпрИзображениеОбъект.Наименование = GUID;
				КонецЕсли;
					СпрИзображениеОбъект.Изображение = Новый ХранилищеЗначения(Изображение);
					СпрИзображениеОбъект.Записать();
					СпрИзображение = СпрИзображениеОбъект.Ссылка;
				Если ЗначениеЗаполнено(СпрИзображение) И СпрИзображение <> СпрОбъект.Изображение Тогда
					СпрОбъект.Изображение = СпрИзображение;
				КонецЕсли;
			КонецЕсли;	
			//Табличная часть
			СчОтветов = 0;
			СпрОбъект.Ответы.Очистить();
			ВсегоОтветов = Ответы.Количество();
			Для Каждого ОтветИст ИЗ Ответы Цикл
				ОтветОбъект = СпрОбъект.Ответы.Добавить();
				СчОтветов = СчОтветов + 1;
				Если СтрНайти(ОтветИст, Правильный) > 0 Тогда
					ОтветОбъект.Правильный = Истина;
				КонецЕсли;
				ОтветОбъект.Ответ = Прав(ОтветИст, СтрДлина(ОтветИст)-9);
			КонецЦикла;
		КонецЕсли;
		
		Если СпрОбъект.Модифицированность() Тогда
			СпрОбъект.Актуальный = Истина;
			СпрОбъект.Записать();
			СтруктураТабДок.КоличествоЭлементов = СтруктураТабДок.КоличествоЭлементов + 1;;
		 	СтруктураТабДок.КоличествоЭлементовДобавлено = СтруктураТабДок.КоличествоЭлементовДобавлено + КоличествоЭлементовДобавлено;
		 	СтруктураТабДок.КоличествоЭлементовОбновлено = СтруктураТабДок.КоличествоЭлементовОбновлено + КоличествоЭлементовОбновлено;
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Текст = типДействия + СпрОбъект.Наименование;
			ОбластьСтрока.Параметры.Код = СпрОбъект.Код;
			ТабДокумент.Вывести(ОбластьСтрока);
		КонецЕсли;
		
		Возврат Истина;
				
	Исключение
		
		ОбластьОшибка = Макет.ПолучитьОбласть("Ошибка");
		ОбластьОшибка.Параметры.Текст = ОписаниеОшибки();
		ТабДокумент.Вывести(ОбластьОшибка);
		ОбластьПропуск = Макет.ПолучитьОбласть("Пропуск");
		ТабДокумент.Вывести(ОбластьПропуск);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

